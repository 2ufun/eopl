#lang racket

;;;;;;;;;;;;;
;;Chapter 1;;
;;;;;;;;;;;;;

(define list-length
  (lambda (lst)
    (cond [(null? lst)
           0]
          [else
           (+ 1 (list-length (cdr lst)))])))


(define nth-element
  (lambda (lst n)
    (cond [(null? lst)
           (report-list-too-short n)]
          [(zero? n)
           (car lst)]
          [else
           (nth-element (cdr lst) (- n 1))])))
(define (report-list-too-short n)
      (error "nth-element : List too short by the index"))


(define remove-first
  (lambda (s los)
    (cond [(null? los)
           '()]
          [(eq? (car los) s)
           (cdr los)]
          [else
           (cons (car los) (remove-first s (cdr los)))])))


(define occurs-free?
  (lambda (var exp)
    (cond [(symbol? exp)
           (eq? var exp)]
          [(eq? (car exp) 'lambda)
           (and (not (eq? var (car (cadr exp))))
                (occurs-free? var (caddr exp)))]
          [else
           (or (occurs-free? var (car exp))
               (occurs-free? var (cadr exp)))])))


(define subst
  (lambda (new old slist)
    (cond [(null? slist)
           '()]
          [else
           (cons (subst-in-s-exp new old (car slist))
                 (subst new old (cdr slist)))])))
(define subst-in-s-exp
  (lambda (new old sexp)
    (cond [(symbol? sexp)
           (cond [(eq? sexp old)
                  new]
                 [else
                  sexp])]
          [else
           (subst new old sexp)])))


(define subst-map
  (lambda (new old slist)
    (map (lambda (item)
           (cond [(symbol? item)
                  (cond [(eq? item old)
                         new]
                        [else
                         item])]
                 [else
                  (subst-map new old item)]))
         slist)))


(define number-elements-from
  (lambda (lst n)
    (cond [(null? lst)
           '()]
          [else
           (cons (list n (car lst))
                 (number-elements-from (cdr lst) (+ n 1)))])))
(define number-elements
  (lambda (lst)
    (number-elements-from lst 0)))



;;;;;;;;;;;;;
;;Chapter 2;;
;;;;;;;;;;;;;


;;;;;;;;;;;;;
;;;;stack;;;;
;;;;;;;;;;;;;
(define empty-stack '())

(define push
  (lambda (item stack)
    (cons item stack)))

(define pop
  (lambda (stack)
    (cdr stack)))

(define top
  (lambda (stack)
    (car stack)))

(define empty-stack?
  (lambda (stack)
    (null? stack)))